#pragma once

import "UniqueCreator.Graphics.Gpu.ComputeCommandContext.idl";
import "UniqueCreator.Graphics.Gpu.GraphicsPipelineState.idl";
import "UniqueCreator.Graphics.Gpu.BackBuffer.idl";
import "UniqueCreator.Graphics.Gpu.ColorBuffer.idl";
import "UniqueCreator.Graphics.Gpu.DepthBuffer.idl";
import "UniqueCreator.Graphics.Gpu.UploadBuffer.idl";
import "UniqueCreator.Graphics.Gpu.SubresourceData.idl";

namespace UniqueCreator
{
    namespace Graphics
    {
        namespace Gpu
        {
            interface IGraphicsComputeCommandContext requires IComputeCommandContext
            {
				//Graphics
                void SetGraphicsPipelineStateObject(GraphicsPipelineState pso);

                [overload("Clear"), default_overload]
                void ClearSwapChain(SwapChainBuffer b);

                [overload("Clear")]
                void ClearColor(IColorBuffer b);

                [overload("Clear")]
                void ClearDepth(IDepthBuffer b);

                [overload("Clear")]
                void ClearDepthStencil(IDepthStencilBuffer b);

                void SetPrimitiveTopology(PrimitiveTopology t);

                void Draw(UInt32 vertexCount, UInt32 vertexOffset);
				void DrawInstanced(UInt32 vertexCountPerInstance, UInt32 instanceCount, UInt32 startVertexLocation, UInt32 startInstanceLocation);
				void DrawIndexed(UInt32 indexCount, UInt32 startIndexLocation, Int32 baseVertexLocation );
				void DrawIndexedInstanced(UInt32 indexCountPerInstance, UInt32 instanceCount, UInt32 startIndexLocation, Int32 baseVertexLocation, UInt32 startInstanceLocation);

                void SetViewPort(ViewPort vp);
                void SetScissorRectangle(Rectangle2D r);

				void SetIndexBuffer(IndexBufferView view);
				void SetVertexBuffer(UInt32 slot, VertexBufferView view);

				void SetGraphicsSRVBuffer(UInt32 rootIndex, IVirtualResource r);
				void SetGraphicsUAVBuffer(UInt32 rootIndex, IVirtualResource r);
				void SetGraphicsConstantBuffer(UInt32 rootIndex, GpuVirtualAddress r);

				void SetGraphicsConstantBufferData(UInt32 rootIndex, Windows.Foundation.Collections.IVector<UInt8> buffer);
				void SetGraphicsSRV(UInt32 rootIndex, UInt32 offset, IShaderResourceView r);
				void SetGraphicsUAV(UInt32 rootIndex, UInt32 offset, IUnorderedAccessView r);
				void SetGraphicsRootConstant(UInt32 rootIndex, UInt32 offset, UInt32 constant);

				[overload("SetRenderTargetSimple"), default_overload]
                void SetRenderTarget(IColorBuffer b);
                [overload("SetRenderTargetSimple")]
                void SetSwapChain(SwapChainBuffer b);

                [overload("SetRenderTarget"), default_overload]
                void SetColorDepth(IColorBuffer b, IDepthBuffer d);

                [overload("SetRenderTarget")]
                void SetColorDepthStencil(IColorBuffer b, IDepthStencilBuffer d);

                [overload("SetRenderTarget")]
                void SetSwapChainDepth(SwapChainBuffer b, IDepthBuffer d);

                [overload("SetRenderTarget")]
                void SetSwapChainDepthStencil(SwapChainBuffer b, IDepthStencilBuffer d);

				[overload("SetRenderTargetSimple")]
                void SetDepth(IDepthBuffer d);

				[overload("SetRenderTargetSimple")]
                void SetDepthStencil(IDepthStencilBuffer d);

				void UpdateBuffer(IVirtualResource destination, UInt32 destination_offset, Windows.Foundation.Collections.IVector<UInt8> data );
				void UploadResource(IVirtualResource r, UInt32 first_sub_resource, UInt32 sub_resource_count, Windows.Foundation.Collections.IVector<SubresourceData> d);


				//Compute
                void TransitionResource(IVirtualResource r, ResourceState old_state, ResourceState new_state);
            }
        }
    }
}
