// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once
#include "winrt/base.h"

WINRT_WARNING_PUSH

static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180227.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/UniqueCreator.Graphics.2.h"

namespace winrt::impl {

template <typename D> HRESULT consume_UniqueCreator_Graphics_IDirectQueue<D>::WaitForIdleGpu() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::IDirectQueue)->WaitForIdleGpu(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_IDirectQueue<D>::WaitForFence(UniqueCreator::Graphics::IFenceHandle const& v) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::IDirectQueue)->WaitForFence(get_abi(v), put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_IDirectQueue<D>::InsertWaitOn(UniqueCreator::Graphics::IFenceHandle const& v) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::IDirectQueue)->InsertWaitOn(get_abi(v), put_abi(result)));
    return result;
}

template <typename D> UniqueCreator::Graphics::DirectQueue consume_UniqueCreator_Graphics_IResourceCreateContext<D>::CreateDirectQueue() const
{
    UniqueCreator::Graphics::DirectQueue value{ nullptr };
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::IResourceCreateContext)->CreateDirectQueue(put_abi(value)));
    return value;
}

template <typename D> UniqueCreator::Graphics::SwapChainPanelSwapChainResources consume_UniqueCreator_Graphics_ISwapChainPanelSwapChainResourcesFactory<D>::Create(UniqueCreator::Graphics::ResourceCreateContext const& ctx, Windows::UI::Xaml::Controls::SwapChainPanel const& panel) const
{
    UniqueCreator::Graphics::SwapChainPanelSwapChainResources value{ nullptr };
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory)->Create(get_abi(ctx), get_abi(panel), put_abi(value)));
    return value;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::Resize(uint32_t width, uint32_t height) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->Resize(width, height, put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::WaitForGpu() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->WaitForGpu(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::WaitForFence(UniqueCreator::Graphics::IFenceHandle const& v) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->WaitForFence(get_abi(v), put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::InsertWaitOn(UniqueCreator::Graphics::IFenceHandle const& v) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->InsertWaitOn(get_abi(v), put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::Present() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->Present(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::Sync() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->Sync(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::MoveToNextFrame() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->MoveToNextFrame(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_UniqueCreator_Graphics_ISwapChainResources<D>::SetSourceSize(uint32_t width, uint32_t height) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(UniqueCreator::Graphics::ISwapChainResources)->SetSourceSize(width, height, put_abi(result)));
    return result;
}

template <typename D>
struct produce<D, UniqueCreator::Graphics::IBackgroundSwapChainResources> : produce_base<D, UniqueCreator::Graphics::IBackgroundSwapChainResources>
{};

template <typename D>
struct produce<D, UniqueCreator::Graphics::IDirectQueue> : produce_base<D, UniqueCreator::Graphics::IDirectQueue>
{
    HRESULT __stdcall WaitForIdleGpu(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().WaitForIdleGpu());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall WaitForFence(void* v, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().WaitForFence(*reinterpret_cast<UniqueCreator::Graphics::IFenceHandle const*>(&v)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall InsertWaitOn(void* v, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().InsertWaitOn(*reinterpret_cast<UniqueCreator::Graphics::IFenceHandle const*>(&v)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, UniqueCreator::Graphics::IFenceHandle> : produce_base<D, UniqueCreator::Graphics::IFenceHandle>
{};

template <typename D>
struct produce<D, UniqueCreator::Graphics::IResourceCreateContext> : produce_base<D, UniqueCreator::Graphics::IResourceCreateContext>
{
    HRESULT __stdcall CreateDirectQueue(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            *value = detach_from<UniqueCreator::Graphics::DirectQueue>(this->shim().CreateDirectQueue());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, UniqueCreator::Graphics::ISwapChainPanelSwapChainResources> : produce_base<D, UniqueCreator::Graphics::ISwapChainPanelSwapChainResources>
{};

template <typename D>
struct produce<D, UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory> : produce_base<D, UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory>
{
    HRESULT __stdcall Create(void* ctx, void* panel, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            *value = detach_from<UniqueCreator::Graphics::SwapChainPanelSwapChainResources>(this->shim().Create(*reinterpret_cast<UniqueCreator::Graphics::ResourceCreateContext const*>(&ctx), *reinterpret_cast<Windows::UI::Xaml::Controls::SwapChainPanel const*>(&panel)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, UniqueCreator::Graphics::ISwapChainResources> : produce_base<D, UniqueCreator::Graphics::ISwapChainResources>
{
    HRESULT __stdcall Resize(uint32_t width, uint32_t height, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Resize(width, height));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall WaitForGpu(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().WaitForGpu());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall WaitForFence(void* v, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().WaitForFence(*reinterpret_cast<UniqueCreator::Graphics::IFenceHandle const*>(&v)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall InsertWaitOn(void* v, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().InsertWaitOn(*reinterpret_cast<UniqueCreator::Graphics::IFenceHandle const*>(&v)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Present(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Present());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Sync(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Sync());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall MoveToNextFrame(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().MoveToNextFrame());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall SetSourceSize(uint32_t width, uint32_t height, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().SetSourceSize(width, height));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

}

WINRT_EXPORT namespace winrt::UniqueCreator::Graphics {

inline DirectQueue::DirectQueue() :
    DirectQueue(get_activation_factory<DirectQueue>().ActivateInstance<DirectQueue>())
{}

inline ResourceCreateContext::ResourceCreateContext() :
    ResourceCreateContext(get_activation_factory<ResourceCreateContext>().ActivateInstance<ResourceCreateContext>())
{}

inline SwapChainPanelSwapChainResources::SwapChainPanelSwapChainResources(UniqueCreator::Graphics::ResourceCreateContext const& ctx, Windows::UI::Xaml::Controls::SwapChainPanel const& panel) :
    SwapChainPanelSwapChainResources(get_activation_factory<SwapChainPanelSwapChainResources, UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory>().Create(ctx, panel))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::UniqueCreator::Graphics::IBackgroundSwapChainResources> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::IBackgroundSwapChainResources> {};
template<> struct hash<winrt::UniqueCreator::Graphics::IDirectQueue> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::IDirectQueue> {};
template<> struct hash<winrt::UniqueCreator::Graphics::IFenceHandle> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::IFenceHandle> {};
template<> struct hash<winrt::UniqueCreator::Graphics::IResourceCreateContext> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::IResourceCreateContext> {};
template<> struct hash<winrt::UniqueCreator::Graphics::ISwapChainPanelSwapChainResources> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::ISwapChainPanelSwapChainResources> {};
template<> struct hash<winrt::UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory> {};
template<> struct hash<winrt::UniqueCreator::Graphics::ISwapChainResources> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::ISwapChainResources> {};
template<> struct hash<winrt::UniqueCreator::Graphics::DirectQueue> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::DirectQueue> {};
template<> struct hash<winrt::UniqueCreator::Graphics::ResourceCreateContext> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::ResourceCreateContext> {};
template<> struct hash<winrt::UniqueCreator::Graphics::SwapChainPanelSwapChainResources> : winrt::impl::hash_base<winrt::UniqueCreator::Graphics::SwapChainPanelSwapChainResources> {};

}

WINRT_WARNING_POP
