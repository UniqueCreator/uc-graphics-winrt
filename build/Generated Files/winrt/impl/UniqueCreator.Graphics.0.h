// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls {

struct SwapChainPanel;

}

WINRT_EXPORT namespace winrt::UniqueCreator::Graphics {

struct IBackgroundSwapChainResources;
struct IDirectQueue;
struct IFenceHandle;
struct IResourceCreateContext;
struct ISwapChainPanelSwapChainResources;
struct ISwapChainPanelSwapChainResourcesFactory;
struct ISwapChainResources;
struct DirectQueue;
struct ResourceCreateContext;
struct SwapChainPanelSwapChainResources;

}

namespace winrt::impl {

template <> struct category<UniqueCreator::Graphics::IBackgroundSwapChainResources>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::IDirectQueue>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::IFenceHandle>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::IResourceCreateContext>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::ISwapChainPanelSwapChainResources>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::ISwapChainResources>{ using type = interface_category; };
template <> struct category<UniqueCreator::Graphics::DirectQueue>{ using type = class_category; };
template <> struct category<UniqueCreator::Graphics::ResourceCreateContext>{ using type = class_category; };
template <> struct category<UniqueCreator::Graphics::SwapChainPanelSwapChainResources>{ using type = class_category; };
template <> struct name<UniqueCreator::Graphics::IBackgroundSwapChainResources>{ static constexpr auto & value{ L"UniqueCreator.Graphics.IBackgroundSwapChainResources" }; };
template <> struct name<UniqueCreator::Graphics::IDirectQueue>{ static constexpr auto & value{ L"UniqueCreator.Graphics.IDirectQueue" }; };
template <> struct name<UniqueCreator::Graphics::IFenceHandle>{ static constexpr auto & value{ L"UniqueCreator.Graphics.IFenceHandle" }; };
template <> struct name<UniqueCreator::Graphics::IResourceCreateContext>{ static constexpr auto & value{ L"UniqueCreator.Graphics.IResourceCreateContext" }; };
template <> struct name<UniqueCreator::Graphics::ISwapChainPanelSwapChainResources>{ static constexpr auto & value{ L"UniqueCreator.Graphics.ISwapChainPanelSwapChainResources" }; };
template <> struct name<UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory>{ static constexpr auto & value{ L"UniqueCreator.Graphics.ISwapChainPanelSwapChainResourcesFactory" }; };
template <> struct name<UniqueCreator::Graphics::ISwapChainResources>{ static constexpr auto & value{ L"UniqueCreator.Graphics.ISwapChainResources" }; };
template <> struct name<UniqueCreator::Graphics::DirectQueue>{ static constexpr auto & value{ L"UniqueCreator.Graphics.DirectQueue" }; };
template <> struct name<UniqueCreator::Graphics::ResourceCreateContext>{ static constexpr auto & value{ L"UniqueCreator.Graphics.ResourceCreateContext" }; };
template <> struct name<UniqueCreator::Graphics::SwapChainPanelSwapChainResources>{ static constexpr auto & value{ L"UniqueCreator.Graphics.SwapChainPanelSwapChainResources" }; };
template <> struct guid<UniqueCreator::Graphics::IBackgroundSwapChainResources>{ static constexpr GUID value{ 0xBE4A9AB4,0x977F,0x4B2E,{ 0x80,0x6E,0x34,0x21,0x55,0x7B,0x56,0x1D } }; };
template <> struct guid<UniqueCreator::Graphics::IDirectQueue>{ static constexpr GUID value{ 0xD1566F5D,0x3722,0x4F1C,{ 0xA3,0x59,0xF6,0x36,0x61,0x64,0xA1,0xA4 } }; };
template <> struct guid<UniqueCreator::Graphics::IFenceHandle>{ static constexpr GUID value{ 0xC6F1FC49,0x044A,0x4208,{ 0xA8,0x06,0x55,0x03,0x4A,0x21,0x99,0xF2 } }; };
template <> struct guid<UniqueCreator::Graphics::IResourceCreateContext>{ static constexpr GUID value{ 0xD5161D72,0x0BF4,0x4C7F,{ 0x94,0x01,0x87,0x9A,0xA6,0x46,0xBF,0xA9 } }; };
template <> struct guid<UniqueCreator::Graphics::ISwapChainPanelSwapChainResources>{ static constexpr GUID value{ 0xF2D80A74,0x731A,0x4F9C,{ 0xBC,0x56,0x91,0x0E,0x21,0x51,0x1D,0x43 } }; };
template <> struct guid<UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory>{ static constexpr GUID value{ 0xFBF1D69F,0x952D,0x4523,{ 0x89,0xB0,0xF4,0xC6,0xA9,0x9C,0x13,0xD7 } }; };
template <> struct guid<UniqueCreator::Graphics::ISwapChainResources>{ static constexpr GUID value{ 0xCD38D0C5,0x743A,0x43C2,{ 0x88,0x9F,0x2E,0xA3,0xA1,0x40,0x82,0xDF } }; };
template <> struct default_interface<UniqueCreator::Graphics::DirectQueue>{ using type = UniqueCreator::Graphics::IDirectQueue; };
template <> struct default_interface<UniqueCreator::Graphics::ResourceCreateContext>{ using type = UniqueCreator::Graphics::IResourceCreateContext; };
template <> struct default_interface<UniqueCreator::Graphics::SwapChainPanelSwapChainResources>{ using type = UniqueCreator::Graphics::ISwapChainPanelSwapChainResources; };

template <typename D>
struct consume_UniqueCreator_Graphics_IBackgroundSwapChainResources
{
};
template <> struct consume<UniqueCreator::Graphics::IBackgroundSwapChainResources> { template <typename D> using type = consume_UniqueCreator_Graphics_IBackgroundSwapChainResources<D>; };

template <typename D>
struct consume_UniqueCreator_Graphics_IDirectQueue
{
    HRESULT WaitForIdleGpu() const;
    HRESULT WaitForFence(UniqueCreator::Graphics::IFenceHandle const& v) const;
    HRESULT InsertWaitOn(UniqueCreator::Graphics::IFenceHandle const& v) const;
};
template <> struct consume<UniqueCreator::Graphics::IDirectQueue> { template <typename D> using type = consume_UniqueCreator_Graphics_IDirectQueue<D>; };

template <typename D>
struct consume_UniqueCreator_Graphics_IFenceHandle
{
};
template <> struct consume<UniqueCreator::Graphics::IFenceHandle> { template <typename D> using type = consume_UniqueCreator_Graphics_IFenceHandle<D>; };

template <typename D>
struct consume_UniqueCreator_Graphics_IResourceCreateContext
{
    UniqueCreator::Graphics::DirectQueue CreateDirectQueue() const;
};
template <> struct consume<UniqueCreator::Graphics::IResourceCreateContext> { template <typename D> using type = consume_UniqueCreator_Graphics_IResourceCreateContext<D>; };

template <typename D>
struct consume_UniqueCreator_Graphics_ISwapChainPanelSwapChainResources
{
};
template <> struct consume<UniqueCreator::Graphics::ISwapChainPanelSwapChainResources> { template <typename D> using type = consume_UniqueCreator_Graphics_ISwapChainPanelSwapChainResources<D>; };

template <typename D>
struct consume_UniqueCreator_Graphics_ISwapChainPanelSwapChainResourcesFactory
{
    UniqueCreator::Graphics::SwapChainPanelSwapChainResources Create(UniqueCreator::Graphics::ResourceCreateContext const& ctx, Windows::UI::Xaml::Controls::SwapChainPanel const& panel) const;
};
template <> struct consume<UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory> { template <typename D> using type = consume_UniqueCreator_Graphics_ISwapChainPanelSwapChainResourcesFactory<D>; };

template <typename D>
struct consume_UniqueCreator_Graphics_ISwapChainResources
{
    HRESULT Resize(uint32_t width, uint32_t height) const;
    HRESULT WaitForGpu() const;
    HRESULT WaitForFence(UniqueCreator::Graphics::IFenceHandle const& v) const;
    HRESULT InsertWaitOn(UniqueCreator::Graphics::IFenceHandle const& v) const;
    HRESULT Present() const;
    HRESULT Sync() const;
    HRESULT MoveToNextFrame() const;
    HRESULT SetSourceSize(uint32_t width, uint32_t height) const;
};
template <> struct consume<UniqueCreator::Graphics::ISwapChainResources> { template <typename D> using type = consume_UniqueCreator_Graphics_ISwapChainResources<D>; };

template <> struct abi<UniqueCreator::Graphics::IBackgroundSwapChainResources>{ struct type : IInspectable
{
};};

template <> struct abi<UniqueCreator::Graphics::IDirectQueue>{ struct type : IInspectable
{
    virtual HRESULT __stdcall WaitForIdleGpu(HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall WaitForFence(void* v, HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall InsertWaitOn(void* v, HRESULT* result) noexcept = 0;
};};

template <> struct abi<UniqueCreator::Graphics::IFenceHandle>{ struct type : IInspectable
{
};};

template <> struct abi<UniqueCreator::Graphics::IResourceCreateContext>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateDirectQueue(void** value) noexcept = 0;
};};

template <> struct abi<UniqueCreator::Graphics::ISwapChainPanelSwapChainResources>{ struct type : IInspectable
{
};};

template <> struct abi<UniqueCreator::Graphics::ISwapChainPanelSwapChainResourcesFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Create(void* ctx, void* panel, void** value) noexcept = 0;
};};

template <> struct abi<UniqueCreator::Graphics::ISwapChainResources>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Resize(uint32_t width, uint32_t height, HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall WaitForGpu(HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall WaitForFence(void* v, HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall InsertWaitOn(void* v, HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall Present(HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall Sync(HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall MoveToNextFrame(HRESULT* result) noexcept = 0;
    virtual HRESULT __stdcall SetSourceSize(uint32_t width, uint32_t height, HRESULT* result) noexcept = 0;
};};

}
